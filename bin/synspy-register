#!/usr/bin/python
#
# Copyright 2015 University of Southern California
# Distributed under the (new) BSD License. See LICENSE.txt for more info.
#

import os
import sys
import pcl
import pcl.registration
import numpy as np
import csv
import vispy.scene
from vispy.scene import visuals

def transform_points(M, a):
    assert a.shape[1] == 3
    a1 = np.zeros((a.shape[0], 4), dtype=np.float32)
    a2 = np.zeros(a.shape, dtype=np.float32)
    
    a1[:,0:3] = a
    a1[:,3] = 1.0
    
    for i in range(a1.shape[0]):
        p = np.dot(M, a1[i])
        a2[i,:] = p[0:3] / p[3]

    return a2

def draw_points(view, a, face_color, size=10):
    scatter = visuals.Markers()
    scatter.set_data(a, edge_color=None, face_color=face_color, size=size)
    view.add(scatter)

def csv2pointcloud(filename):
    cols = os.getenv('SEGMENTS_ZYX_COLS', 'Z,Y,X')
    cols = tuple(cols.split(','))
    assert len(cols) == 3
    grid = os.getenv('SEGMENTS_ZYX_GRID', '1,1,1')
    grid = tuple(map(float, grid.split(',')))
    assert len(grid) == 3
    f = open(filename, 'r')
    rows = []
    for row in csv.DictReader(f):
        rows.append( (float(row[cols[2]]), float(row[cols[1]]), float(row[cols[0]])) )
    pc = pcl.PointCloud(len(rows))
    a = np.asarray(pc)
    for i in range(len(rows)):
        for j in range(3):
            a[i,j] = rows[i][j] * grid[j]
    return pc

def register(filenames):
    pointclouds = map(csv2pointcloud, filenames)
    arrays = map(np.asarray, pointclouds)
    
    sys.stderr.write('Pointcloud lengths: %s\n' % map(lambda pc: pc.size, pointclouds))
    results = pcl.registration.icp_nl(pointclouds[1], pointclouds[0], 25)
    print results
    assert results[0], "point-cloud registration did not converge"
    M = results[1]

    nuc1 = arrays[0]
    nuc2 = transform_points(M, arrays[1])
    scale = max(nuc1.max(), nuc2.max())
    if len(arrays) == 4:
        syn1 = arrays[2]
        syn2 = transform_points(M, arrays[3])
        scale = max(scale, syn1.max(), syn2.max())
    else:
        syn1 = None
        syn2 = None

    # sanity check that our transform is using same math as pcl did
    diff = nuc2 - results[2]
    assert diff.min() == 0
    assert diff.max() == 0
    
    canvas = vispy.scene.SceneCanvas(keys='interactive', show=True)
    view = canvas.central_widget.add_view()

    draw_points(view, nuc1/scale, (0,1,0,0.25), 30)
    draw_points(view, nuc2/scale, (1,0,0,0.25), 30)

    if len(arrays) == 4:
        draw_points(view, syn1/scale, (0,1,0,0.75), 4)
        draw_points(view, syn2/scale, (1,0,0,0.75), 4)
    
    axis = visuals.XYZAxis(parent=view.scene)
    view.camera = 'turntable'
    vispy.app.run()
    
    return 0
    
if __name__ == '__main__':
    assert len(sys.argv) >= 3, "usage: synspy-register nucfile1 nucfile2 [synfile1 synfile2]"
    assert len(sys.argv) <= 5, "usage: synspy-register nucfile1 nucfile2 [synfile1 synfile2]"
    result = register(sys.argv[1:])
    sys.exit(result)
