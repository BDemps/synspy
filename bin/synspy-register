#!/usr/bin/python
#
# Copyright 2015 University of Southern California
# Distributed under the (new) BSD License. See LICENSE.txt for more info.
#

import os
import sys
import pcl
import pcl.registration
import numpy as np
import csv
import vispy.scene
from vispy.scene import visuals
from MDAnalysis.lib.transformations import decompose_matrix
import math

def transform_points(M, a):
    assert a.shape[1] == 3
    a1 = np.zeros((a.shape[0], 4), dtype=np.float32)
    a2 = np.zeros(a.shape, dtype=np.float32)
    
    a1[:,0:3] = a
    a1[:,3] = 1.0
    
    for i in range(a1.shape[0]):
        p = np.dot(M, a1[i])
        a2[i,:] = p[0:3] / p[3]

    return a2

def draw_points(view, a, weights, face_color, size=10):
    scatter = visuals.Markers()
    scatter.set_gl_state(depth_test=True)
    scatter.antialias = False
    colors = np.zeros((weights.shape[0], 4), np.float32)
    for i in range(3):
        colors[:,i] = weights
    colors[:,3] = 1.0
    colors[:,:] *= np.array(face_color, np.float32)
    scatter.set_data(a, edge_color=None, face_color=colors, edge_width=0, size=size)
    view.add(scatter)

def csv2pointcloud_weights(filename):
    cols = os.getenv('SEGMENTS_ZYX_COLS', 'Z,Y,X')
    cols = tuple(cols.split(','))
    wcol = 'raw core'
    assert len(cols) == 3
    grid = os.getenv('SEGMENTS_ZYX_GRID', '1,1,1')
    grid = np.array(tuple(map(float, grid.split(','))), dtype=np.float32)
    assert grid.shape == (3,), grid.shape
    f = open(filename, 'r')
    rows = []
    for row in csv.DictReader(f):
        if row[cols[0]] == 'saved':
            continue
        rows.append( (float(row[cols[2]]), float(row[cols[1]]), float(row[cols[0]]), int(row.get('override', 0) or '0'), float(row[wcol])) )
    a = np.asarray(rows, dtype=np.float32)
    print a.shape
    a[:,0:3] *= grid
    # filtered array where manual classification is true
    fa = a[ (a[:,3] == 3) | (a[:,3] == 7) ]
    if fa.shape[0] > 5:
        print('From %s using %s manually classified points' % (filename, fa.shape[0]))
        a = fa
    else:
        print('From %s using all %s detected points' % (filename, a.shape[0]))
    pc = pcl.PointCloud()
    pc.from_array(a[:,0:3])
    return pc, a[:,4]

def register(filenames):
    pointcloud_weights = list(map(csv2pointcloud_weights, filenames))
    pointclouds = list(map(lambda tup: tup[0], pointcloud_weights))
    arrays = list(map(np.asarray, pointclouds))
    weights = list(map(lambda tup: tup[1], pointcloud_weights))

    maxweight0 = reduce(max, map(lambda a: a.max(), weights[0:2]), 1.0)
    for w in weights[0:2]:
        w[:] *= np.float32(1.0/maxweight0)
        #w[:] = np.sqrt(w[:])

    if len(weights) == 4:
        maxweight1 = reduce(max, map(lambda a: a.max(), weights[2:4]), 1.0)
        for w in weights[2:4]:
            w[:] *= np.float32(1.0/maxweight1)
            #w[:] = np.sqrt(w[:])

    segment_sizes = list(map(float, os.getenv('SEGMENT_SIZES', '30,4').split(',')))
    assert len(segment_sizes) == 2
    
    results = pcl.registration.icp_nl(pointclouds[1], pointclouds[0])
    assert results[0], "point-cloud registration did not converge"
    M = results[1]

    print('VIEW_MATRIX="%s"' % (
        '[%s]' % ', '.join([
            '[%s]' % ', '.join([
                "%f" % M[i,j]
                for j in range(4)
            ])
            for i in range(4)
        ])
    ))

    parts = decompose_matrix(M.T)
    #print(parts)
    angles = parts[2]
    #print(angles)
    print('VIEW_ROTATE="%s"' % ','.join([str(r * 180./math.pi) for r in angles]))

    nuc1 = arrays[0]
    nuc2 = transform_points(M, arrays[1])

    # sanity check that our transform is using same math as pcl did
    diff = nuc2 - results[2]
    assert diff.min() == 0
    assert diff.max() == 0

    bbox = np.zeros((2,3), dtype=np.float32)
    bbox[0,:] = np.minimum(nuc1.min(axis=0), nuc2.min(axis=0))
    bbox[1,:] = np.maximum(nuc1.max(axis=0), nuc2.max(axis=0))
    if len(arrays) == 4:
        syn1 = arrays[2]
        syn2 = transform_points(M, arrays[3])
        bbox[0,:] = np.minimum(syn1.min(axis=0), bbox[0,:])
        bbox[0,:] = np.minimum(syn2.min(axis=0), bbox[0,:])
        bbox[1,:] = np.minimum(syn1.max(axis=0), bbox[1,:])
        bbox[1,:] = np.minimum(syn2.max(axis=0), bbox[1,:])
    else:
        syn1 = None
        syn2 = None

    origin = (bbox[1,:] - bbox[0,:]) / 2
    scale = origin.max()
    
    nuc1 = (nuc1 - origin)/scale
    nuc2 = (nuc2 - origin)/scale
    if len(arrays) == 4:
        syn1 = (syn1 - origin)/scale
        syn2 = (syn2 - origin)/scale
        
    canvas = vispy.scene.SceneCanvas(keys='interactive', show=True, bgcolor=(0.15,0.15,0.15,1))
    view = canvas.central_widget.add_view()
    view.set_gl_state(depth_test=True)

    draw_points(view, nuc1, weights[0], (0,1,1,0.1), segment_sizes[0])
    draw_points(view, nuc2, weights[1], (1,1,0,0.1), segment_sizes[0])

    if len(arrays) == 4:
        draw_points(view, syn1, weights[2], (0,0.9,0.9,0.9), segment_sizes[1])
        draw_points(view, syn2, weights[3], (1,1,0,0.9), segment_sizes[1])
    
    axis = visuals.XYZAxis(parent=view.scene)
    view.camera = 'turntable'
    vispy.app.run()
    
    return 0
    
if __name__ == '__main__':
    assert len(sys.argv) >= 3, "usage: synspy-register nucfile1 nucfile2 [synfile1 synfile2]"
    assert len(sys.argv) <= 5, "usage: synspy-register nucfile1 nucfile2 [synfile1 synfile2]"
    result = register(sys.argv[1:])
    sys.exit(result)
